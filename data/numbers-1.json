// Example pools (later you can load these from JSON files)
const pools = {
  1: [
    { en: "nation", es: "nación" },
    { en: "convention", es: "convención" },
    { en: "education", es: "educación" },
    { en: "communication", es: "comunicación" },
    { en: "organization", es: "organización" }
  ],
  2: [
    { en: "population", es: "población" },
    { en: "representation", es: "representación" },
    { en: "translation", es: "traducción" },
    { en: "reservation", es: "reservación" },
    { en: "motivation", es: "motivación" }
  ]
};

// Ratios (old vs new pool mix)
const ratios = [
  { old: 1.0, next: 0.0 },
  { old: 0.8, next: 0.2 },
  { old: 0.6, next: 0.4 },
  { old: 0.4, next: 0.6 },
  { old: 0.2, next: 0.8 },
  { old: 0.0, next: 1.0 }
];

// Memory: tracks intervals for spaced repetition
let memory = {};

// Helpers
function sample(array, n) {
  const copy = [...array];
  const result = [];
  for (let i = 0; i < n && copy.length > 0; i++) {
    const idx = Math.floor(Math.random() * copy.length);
    result.push(copy[idx]);
    copy.splice(idx, 1);
  }
  return result;
}

function shuffle(array) {
  return array.map(v => ({ v, s: Math.random() }))
              .sort((a,b) => a.s - b.s)
              .map(({v}) => v);
}

// Generate session of 10 questions
function generateSession(poolId, sessionNumber) {
  const prevPool = pools[poolId];
  const nextPool = pools[poolId+1];
  const ratio = ratios[Math.min(sessionNumber, ratios.length-1)];

  const oldCount = Math.round(10 * ratio.old);
  const newCount = 10 - oldCount;

  const oldQs = sample(prevPool, oldCount);
  const newQs = nextPool ? sample(nextPool, newCount) : [];

  let sessionQs = [...oldQs, ...newQs];

  // Add due items (from spaced repetition)
  const dueQs = Object.keys(memory)
    .filter(key => memory[key].due <= sessionNumber)
    .map(key => JSON.parse(key));

  sessionQs = shuffle([...sessionQs, ...dueQs]).slice(0, 10);
  return sessionQs;
}

// Update memory after answers
function updateMemory(answers, sessionNum) {
  for (let i = 0; i < answers.length; i++) {
    const { word, correct } = answers[i];
    const key = JSON.stringify(word);

    if (!memory[key]) {
      memory[key] = { interval: 1, due: sessionNum+1 };
    }

    if (correct) {
      memory[key].interval *= 2;
      memory[key].due = sessionNum + memory[key].interval;
    } else {
      memory[key].interval = 1;
      memory[key].due = sessionNum + 1;
    }
  }
}

// --- Demo Run ---
let sessionNum = 0;
let session = generateSession(1, sessionNum);
console.log("Session 1 questions:");
session.forEach(q => console.log(q.en, "→ ?"));

// Pretend answers
let answers = session.map(q => {
  return { word: q, correct: (q.en !== "convention") }; // got "convention" wrong
});
updateMemory(answers, sessionNum);

// Next session
sessionNum++;
let session2 = generateSession(1, sessionNum);
console.log("\nSession 2 questions:");
session2.forEach(q => console.log(q.en, "→ ?"));
